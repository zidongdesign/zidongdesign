{"remainingRequest":"/Users/chenzidongms/zidongdesign.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/chenzidongms/zidongdesign.github.io/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenzidongms/zidongdesign.github.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenzidongms/zidongdesign.github.io/src/assets/projects/6/Project6.vue?vue&type=template&id=399bf550&scoped=true&","dependencies":[{"path":"/Users/chenzidongms/zidongdesign.github.io/src/assets/projects/6/Project6.vue","mtime":1699976026643},{"path":"/Users/chenzidongms/zidongdesign.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1699625724697},{"path":"/Users/chenzidongms/zidongdesign.github.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1699625729382},{"path":"/Users/chenzidongms/zidongdesign.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1699625724697},{"path":"/Users/chenzidongms/zidongdesign.github.io/node_modules/vue-loader/lib/index.js","mtime":1699625729381}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}