{"remainingRequest":"/Users/chenzidongms/Library/Mobile Documents/com~apple~CloudDocs/zidongdesign/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenzidongms/Library/Mobile Documents/com~apple~CloudDocs/zidongdesign/src/components/MyCursor.vue?vue&type=style&index=0&id=4a965b52&scoped=true&lang=css&","dependencies":[{"path":"/Users/chenzidongms/Library/Mobile Documents/com~apple~CloudDocs/zidongdesign/src/components/MyCursor.vue","mtime":1642561908000},{"path":"/Users/chenzidongms/Library/Mobile Documents/com~apple~CloudDocs/zidongdesign/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenzidongms/Library/Mobile Documents/com~apple~CloudDocs/zidongdesign/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/chenzidongms/Library/Mobile Documents/com~apple~CloudDocs/zidongdesign/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/chenzidongms/Library/Mobile Documents/com~apple~CloudDocs/zidongdesign/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenzidongms/Library/Mobile Documents/com~apple~CloudDocs/zidongdesign/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2N1cnNvci1tYXNrIHsKICAgIHdpZHRoOiAxMDB2dzsKICAgIGhlaWdodDogMTAwJTsKICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgIGxlZnQ6IDA7CiAgICB0b3A6IDA7CiAgICBwb2ludGVyLWV2ZW50czogbm9uZTsKICAgIHotaW5kZXg6IDk4OwogICAgbWl4LWJsZW5kLW1vZGU6ZGlmZmVyZW5jZQp9CiNjdXJzb3ItbWFzayAjY3Vyc29yIHsKICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIHdpZHRoLCBoZWlnaHQ7CiAgICB3aWR0aDogMDsKICAgIGhlaWdodDogMDsKICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDA7CiAgICBsZWZ0OiAwOwogICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuMik7Cn0KI2N1cnNvci1tYXNrICNjdXJzb3IgaW1nIHsKICAgIHdpZHRoOiAwOwogICAgaGVpZ2h0OiAwOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwtNTAlKTsKICAgIGxlZnQ6IDUwJTsKICAgIHRvcDogNTAlOwogICAgb3BhY2l0eTogMDsKICAgIHRyYW5zaXRpb246IDAuM3M7Cn0KCiNjdXJzb3IuaG92ZXIgewogICAgb3BhY2l0eTogMTsKfQoKI2N1cnNvci5ob3Zlci1sYXJnZSBpbWd7CiAgICB3aWR0aDogNHJlbTsKICAgIGhlaWdodDogNHJlbTsKICAgIG9wYWNpdHk6IDAuOTsKfQo="},{"version":3,"sources":["MyCursor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"MyCursor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"cursor-mask\">\n    </div>\n</template>\n\n<script>\n    import P5 from 'p5';\n    import {gsap} from 'gsap'\n\n    export default {\n        name: \"MyCursor\",\n        data(){\n            return{\n                isHover : false,\n                isLargeTarget : false,\n                hoveringObject: null,\n                p5:null,\n            }\n        },\n        computed:{\n            isMobile : function () {\n                return window.matchMedia('(max-width: 767px)').matches\n            }\n        },\n        mounted(){\n            window.addEventListener('resize',()=>{\n                if(!this.isMobile) {\n                    this.initMouse();\n                }\n            });\n            if(!this.isMobile) {\n                this.initMouse();\n            }\n        },\n        methods:{\n            blindListener:function () {\n                window.addEventListener(\"mouseover\", (e)=>{\n                    e = e || window.event;\n                    if(e.target.classList.contains('interactive-l')){\n                        this.hoveringObject = e.target;\n                        this.isHover = true;\n                        this.isLargeTarget = true;\n                    } else if(e.target.classList.contains('interactive-s')){\n                        this.hoveringObject = e.target;\n                        this.isHover = true;\n                        this.isLargeTarget = false;\n                    }\n                });\n                window.addEventListener(\"mouseout\", (e)=>{\n                    e = e || window.event;\n                    if(e.target.classList.contains('interactive-l')){\n                        this.hoveringObject = null;\n                        this.isHover = false;\n                        this.isLargeTarget = false;\n                    } else if(e.target.classList.contains('interactive-s')){\n                        this.hoveringObject = null;\n                        this.isHover = false;\n                        this.isLargeTarget = false;\n                    }\n                });\n                window.addEventListener(\"click\", (e)=>{\n                    e = e || window.event;\n                    if(e.target.classList.contains('interactive-l')){\n                        this.isHover = false;\n                        this.isLargeTarget = false;\n                    } else if(e.target.classList.contains('interactive-s')){\n                        this.isHover = false;\n                        this.isLargeTarget = false;\n                    }\n                })\n            },\n            initMouse:function () {\n                if(this.p5) return;\n                // eslint-disable-next-line no-prototype-builtins\n                const sketch = s =>{\n                    let largeCursorSize = 16*2;\n                    let smallCursorSize = 16;\n                    let mouse = {\n                        x:0,\n                        y:0,\n                        tSize:16,\n                    };\n                    let radius = 16;\n                    let rotAngle = -90;\n                    let accelX = 0.0;\n                    let accelY = 0.0;\n                    let deltaX = 0.0;\n                    let deltaY = 0.0;\n                    let springing = 0.01;\n                    let damping = 0.8;\n\n                    //corner nodes\n                    let nodes = 64;\n\n                    //zero fill arrays\n                    let nodeStartX = [];\n                    let nodeStartY = [];\n                    let nodeX = [];\n                    let nodeY = [];\n                    let angle = [];\n                    let frequency = [];\n                    // soft-body dynamics\n                    let organicConstant = 1.0;\n                    for (let i = 0; i < nodes; i++) {\n                        //initialize arrays to 0\n                        nodeStartX[i] = 0;\n                        nodeStartY[i] = 0;\n                        nodeX[i] = 0;\n                        nodeY[i] = 0;\n                        angle[i] = 0;\n                    }\n                    // initialize frequencies for corner nodes\n                    for (let i = 0; i < nodes; i++) {\n                        frequency[i] = s.random(2, 5);\n                    }\n\n                    s.setup=()=> {\n                        s.createCanvas(s.windowWidth,s.windowHeight);\n                        s.rectMode(s.CENTER);\n                        s.noStroke();\n                        mouse.x = s.mouseX;\n                        mouse.y = s.mouseY;\n                    };\n                    s.draw=()=> {\n                        s.clear();\n\n                        if(this.isHover){\n                            if(!this.isLargeTarget){\n                                gsap.to(mouse,0.8,{\n                                    x: this.hoveringObject.getBoundingClientRect().x + this.hoveringObject.offsetWidth / 2\n                                });\n                                gsap.to(mouse,0.8,{\n                                    y: this.hoveringObject.getBoundingClientRect().y + this.hoveringObject.offsetHeight / 2\n                                });\n                            }else{\n                                gsap.to(mouse,0.8,{\n                                    x: s.mouseX\n                                });\n                                gsap.to(mouse,0.8,{\n                                    y: s.mouseY\n                                });\n                            }\n                            gsap.to(mouse,0.8,{\n                                tSize: largeCursorSize\n                            })\n                            s.stroke(255);\n                            s.noFill();\n                            deltaX = s.mouseX - mouse.x;\n                            deltaY = s.mouseY - mouse.y;\n\n                        }else {\n                            gsap.to(mouse,0.8,{\n                                tSize: smallCursorSize\n                            });\n                            gsap.to(mouse,0.8,{\n                                x: s.mouseX\n                            });\n                            gsap.to(mouse,0.8,{\n                                y: s.mouseY\n                            });\n                            s.fill(255);\n                            s.noStroke();\n                            deltaX = s.mouseX - mouse.x;\n                            deltaY = s.mouseY - mouse.y;\n                        }\n                        radius += (mouse.tSize - radius) * damping;\n\n                        for (let i = 0; i < nodes; i++) {\n                            nodeStartX[i] = mouse.x + s.cos(s.radians(rotAngle)) * radius;\n                            nodeStartY[i] = mouse.y + s.sin(s.radians(rotAngle)) * radius;\n                            rotAngle += 360.0 / nodes;\n                        }\n                        // draw polygon\n                        s.curveTightness(organicConstant);\n\n                        s.beginShape();\n                        for (let i = 0; i < nodes; i++) {\n                            s.curveVertex(nodeX[i], nodeY[i]);\n                        }\n                        for (let i = 0; i < nodes - 1; i++) {\n                            s.curveVertex(nodeX[i], nodeY[i]);\n                        }\n                        s.endShape(s.CLOSE);\n\n\n\n                        // create springing effect\n                        deltaX *= springing;\n                        deltaY *= springing;\n                        accelX += deltaX;\n                        accelY += deltaY;\n\n                        // // move predator's center\n                        // mouse.x += accelX;\n                        // mouse.y += accelY;\n\n                        // slow down springing\n                        accelX *= damping;\n                        accelY *= damping;\n\n                        // change curve tightness\n                        organicConstant = 1 - ((s.abs(accelX) + s.abs(accelY)) * 0.1);\n\n                        //move nodes\n                        for (let i = 0; i < nodes; i++) {\n                            nodeX[i] = nodeStartX[i] + s.sin(s.radians(angle[i])) * (accelX * 2);\n                            nodeY[i] = nodeStartY[i] + s.sin(s.radians(angle[i])) * (accelY * 2);\n                            angle[i] += frequency[i];\n                        }\n                    };\n                    s.windowResized=()=>{\n                        s.resizeCanvas(s.windowWidth, s.windowHeight);\n                    }\n                };\n                this.p5 = new P5(sketch, 'cursor-mask');\n                this.blindListener();\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    #cursor-mask {\n        width: 100vw;\n        height: 100%;\n        position: fixed;\n        left: 0;\n        top: 0;\n        pointer-events: none;\n        z-index: 98;\n        mix-blend-mode:difference\n    }\n    #cursor-mask #cursor {\n        will-change: transform, width, height;\n        width: 0;\n        height: 0;\n        border-radius: 100%;\n        position: absolute;\n        top: 0;\n        left: 0;\n        pointer-events: none;\n        background-color: rgba(255,255,255,0.2);\n    }\n    #cursor-mask #cursor img {\n        width: 0;\n        height: 0;\n        position: relative;\n        transform: translate(-50%,-50%);\n        left: 50%;\n        top: 50%;\n        opacity: 0;\n        transition: 0.3s;\n    }\n\n    #cursor.hover {\n        opacity: 1;\n    }\n\n    #cursor.hover-large img{\n        width: 4rem;\n        height: 4rem;\n        opacity: 0.9;\n    }\n</style>"]}]}